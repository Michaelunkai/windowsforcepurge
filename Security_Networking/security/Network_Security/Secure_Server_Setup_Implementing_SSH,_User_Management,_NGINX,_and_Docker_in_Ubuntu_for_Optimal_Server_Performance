# Comprehensive Guide to Secure Server Setup: Implementing SSH, User Management, NGINX, and Docker in Ubuntu for Optimal Server Performance

## Introduction
This tutorial provides an in-depth guide to setting up a secure and well-organized server environment. It covers everything from secure SSH access, user management, and logging to configuring NGINX, implementing basic network safety measures, and utilizing Docker for application deployment. Following these steps will ensure your server is both secure and optimized for hosting applications.

## Prerequisites
Before starting, ensure you have:
- Access to a VPS or remote server running Ubuntu.
- A local machine with SSH installed.
- Basic knowledge of command-line operations.

## Step 1: Secure SSH Setup

### Creating a New User and Configuring SSH Access
1. **Log in as Root on Your VPS**:
     
   ssh root@your_server_ip

2. **Create a New User and Add to `sudo` Group**:
     
   sudo adduser newuser
   sudo usermod -aG sudo newuser

3. **Generate an SSH Key on Your Local Machine**:
     
   ssh-keygen -t ed25519 -C "your_email@example.com"

4. **Copy Public Key to Server**:
     
   ssh-copy-id -i ~/.ssh/id_ed25519.pub newuser@your_server_ip

5. **Disable Password Authentication on the Server**:
     
   sudo nano /etc/ssh/sshd_config
   Modify the following parameters:
    plaintext
   Port 2222
   PermitRootLogin no
   PasswordAuthentication no
   PubkeyAuthentication yes
   AuthorizedKeysFile .ssh/authorized_keys
   AllowUsers newuser

6. **Restart SSH Service**:
     
   sudo service ssh restart

### Enhancing SSH Security
Add these configurations to `/etc/ssh/sshd_config`:
 plaintext
Protocol 2
MaxAuthTries 3
ClientAliveInterval 300
ClientAliveCountMax 2

## Step 2: User Management and Principle of Least Privilege

### Creating Dedicated Users for Applications
1. **Create a Non-Login User for Your App**:
     
   sudo useradd -rms /usr/sbin/nologin -c "Running MyApp" appuser

2. **Create and Set Permissions for App Directory**:
     
   sudo mkdir /opt/myapp
   sudo chown appuser:appuser /opt/myapp

## Step 3: Log Management

### Configuring Log Rotation
1. **Edit Logrotate Configuration**:
     
   sudo nano /etc/logrotate.d/nginx
   Example NGINX logrotate configuration:
    plaintext
   /var/log/nginx/*.log {
       weekly
       missingok
       rotate 52
       compress
       delaycompress
       notifempty
       create 0640 www-data adm
       sharedscripts
       postrotate
           [ -f /var/run/nginx.pid ] && kill -USR1 `cat /var/run/nginx.pid`
       endscript
   }

2. **Test Logrotate Configuration**:
     
   sudo logrotate -d /etc/logrotate.conf

## Step 4: Implementing Basic Network Safety

### Installing UFW and Fail2Ban
1. **Install UFW and Fail2Ban**:
     
   sudo apt install ufw fail2ban

2. **Configure UFW**:
     
   sudo ufw default deny incoming
   sudo ufw allow outgoing
   sudo ufw allow ssh
   sudo ufw allow 80
   sudo ufw allow 443
   sudo ufw enable

3. **Configure Fail2Ban**:
     
   sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
   sudo nano /etc/fail2ban/jail.local
   Modify these values in `[DEFAULT]`:
    plaintext
   bantime = 10m
   findtime = 10m
   maxretry = 5

## Step 5: NGINX Configuration

### Setting Up NGINX
1. **Install NGINX**:
     
   sudo apt install nginx

2. **Basic Static Website Configuration**:
    plaintext
   server {
       listen 80;
       server_name example.com www.example.com;
       root /var/www/example.com/html;
       index index.html;
       location / {
           try_files $uri $uri/ =404;
       }
       access_log /var/log/nginx/example.com.access.log;
       error_log /var/log/nginx/example.com.error.log warn;
   }

3. **Enable and Reload NGINX**:
     
   sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/
   sudo systemctl reload nginx
   sudo systemctl status nginx

## Step 6: Docker Overview

### Pros and Cons of Using Docker
- **Pros**:
  - Consistency across environments.
  - Isolation and reduced app conflicts.
  - Efficient resource usage compared to traditional VMs.
- **Cons**:
  - Overhead compared to running directly on the host.
  - Complexity in persistent data and networking.
  - Bypasses certain firewall rules.

## Step 7: Quality of Life Tools for Server Management

### Recommended Tools
- **Btop**: Terminal resource monitor.
- **Neoss**: Enhanced TCP and UDP socket monitoring.
- **GoAccess**: Real-time log analyzer.
- **Midnight Commander (MC)**: Text-based file manager.
- **NCDU**: Disk usage analyzer.

## Conclusion
Following this comprehensive guide will help you set up a secure and well-organized server environment. By implementing these steps, you'll ensure your server is optimized for hosting applications, with a strong focus on security, efficiency, and ease of management.
