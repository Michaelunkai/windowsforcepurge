# Comprehensive Guide to Setting Up Edge Computing in Ubuntu Using Docker, Kubernetes, MicroK8s, MQTT, and Ansible

Edge computing is a distributed computing paradigm that brings computation and data storage closer to the location where it is needed to improve response times and save bandwidth. In this guide, we will walk through the steps to set up an edge computing environment on Ubuntu using Docker, Kubernetes, MicroK8s, MQTT, and Ansible.

### Step 1: Install Ubuntu Server
1. **Download Ubuntu Server**: Get the latest version of Ubuntu Server from the official [Ubuntu website](https://ubuntu.com/download/server).
2. **Install Ubuntu Server**: Follow the installation instructions to set up Ubuntu Server on your hardware.

### Step 2: Install Essential Packages
Update your package lists and install essential packages:

  
sudo apt update
sudo apt upgrade -y
sudo apt install -y curl git vim build-essential

### Step 3: Set Up Docker
Docker is a crucial tool for edge computing as it allows you to containerize applications.

1. **Install Docker**:

  
sudo apt install -y docker.io

2. **Start and enable Docker**:

  
sudo systemctl start docker
sudo systemctl enable docker

3. **Verify Docker installation**:

  
sudo docker run hello-world

### Step 4: Set Up Kubernetes (K8s)
Kubernetes can help manage containerized applications across multiple hosts.

1. **Install Minikube** (a tool that lets you run Kubernetes locally):

  
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube

2. **Start Minikube**:

  
minikube start --driver=docker

### Step 5: Set Up MicroK8s (Lightweight Kubernetes for Edge)
MicroK8s is a lightweight, fast, enterprise-grade Kubernetes.

1. **Install MicroK8s**:

  
sudo snap install microk8s --classic

2. **Add your user to the `microk8s` group**:

  
sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube

3. **Enable essential services**:

  
microk8s enable dns dashboard storage

### Step 6: Deploy Applications to the Edge
1. **Create a deployment**:

  
microk8s kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4

2. **Expose the deployment**:

  
microk8s kubectl expose deployment hello-node --type=NodePort --port=8080

3. **Check the services**:

  
microk8s kubectl get services

### Step 7: Use MQTT for Edge Devices Communication
MQTT (Message Queuing Telemetry Transport) is a lightweight messaging protocol.

1. **Install Mosquitto (MQTT broker)**:

  
sudo apt install -y mosquitto mosquitto-clients

2. **Start and enable Mosquitto**:

  
sudo systemctl start mosquitto
sudo systemctl enable mosquitto

3. **Test Mosquitto**:

  
mosquitto_sub -h localhost -t test

Open another terminal and publish a message:

  
mosquitto_pub -h localhost -t test -m "Hello, World!"

### Step 8: Manage Edge Devices with Ansible
Ansible is an open-source automation tool.

1. **Install Ansible**:

  
sudo apt install -y ansible

2. **Create an inventory file** (`hosts.ini`):

 ini
[edge-nodes]
192.168.1.2
192.168.1.3

3. **Write a playbook** (`deploy-app.yml`):

  
- name: Deploy application to edge nodes
  hosts: edge-nodes
  tasks:
    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
    - name: Pull application image
      docker_image:
        name: myapp
        source: pull
    - name: Run application container
      docker_container:
        name: myapp
        image: myapp
        state: started
        ports:
          - "80:80"

4. **Run the playbook**:

  
ansible-playbook -i hosts.ini deploy-app.yml

### Additional Tools and Frameworks
- **KubeEdge**: Kubernetes-based platform for edge computing.
- **EdgeX Foundry**: Vendor-neutral open-source platform for IoT edge computing.

### Conclusion
Edge computing in Ubuntu involves setting up a reliable environment using tools like Docker, Kubernetes, MicroK8s, MQTT, and Ansible. By following the steps above, you can create a robust edge computing infrastructure to deploy and manage your applications efficiently.
