Setting up, running, and establishing security policies in Infrastructure as Code (IaC) using Terraform and Checkov on Ubuntu involves several steps. This comprehensive guide will walk you through the entire process, from installation to implementing security best practices.

## Table of Contents

1. [Prerequisites](#prerequisites)
2. [Installing Terraform on Ubuntu](#installing-terraform-on-ubuntu)
3. [Installing Checkov on Ubuntu](#installing-checkov-on-ubuntu)
4. [Setting Up a Terraform Project](#setting-up-a-terraform-project)
5. [Running Terraform](#running-terraform)
6. [Using Checkov for Security Analysis](#using-checkov-for-security-analysis)
7. [Establishing Security Policies with Checkov](#establishing-security-policies-with-checkov)
8. [Integrating Checkov into CI/CD Pipelines (Optional)](#integrating-checkov-into-cicd-pipelines-optional)
9. [Conclusion](#conclusion)

---

## Prerequisites

Before you begin, ensure you have the following:

- **Ubuntu System**: This guide is tailored for Ubuntu (20.04 LTS or later).
- **Basic Terminal Knowledge**: Familiarity with command-line operations.
- **Sudo Privileges**: You need administrative rights to install software.

---

## Installing Terraform on Ubuntu

Terraform is an open-source IaC tool that allows you to define and provision infrastructure using a declarative configuration language.

### Step 1: Update Package Repository

Open your terminal and update your package list:

  
sudo apt update

### Step 2: Install Required Dependencies

Terraform requires `wget` and `gnupg` for downloading and verifying packages:

  
sudo apt install -y wget gnupg software-properties-common

### Step 3: Add HashiCorp GPG Key

Import the HashiCorp GPG key to verify Terraform downloads:

  
wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg

### Step 4: Add HashiCorp Repository

Add the official HashiCorp Linux repository:

  
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

### Step 5: Update and Install Terraform

Update the package list again and install Terraform:

  
sudo apt update
sudo apt install terraform

### Step 6: Verify Installation

Check the installed Terraform version:

  
terraform version

You should see output similar to:

Terraform v1.5.5

*(Version number may vary based on the latest release.)*

---

## Installing Checkov on Ubuntu

Checkov is a static code analysis tool for IaC that helps you detect security and compliance misconfigurations.

### Step 1: Install Python and pip

Checkov requires Python 3. Ensure Python and pip are installed:

  
sudo apt update
sudo apt install -y python3 python3-pip

Verify installations:

  
 3 --version
pip3 --version

### Step 2: Install Checkov via pip

Use pip to install Checkov:

  
pip3 install checkov

### Step 3: Verify Installation

Check the installed Checkov version:

  
checkov --version

You should see output similar to:

Checkov v2.0.113, by Bridgecrew

*(Version number may vary based on the latest release.)*

---

## Setting Up a Terraform Project

Let's create a simple Terraform project to provision infrastructure. For demonstration purposes, we'll use AWS as the cloud provider.

### Step 1: Install AWS CLI (Optional)

If you're using AWS, installing the AWS CLI can help manage credentials and configurations.

  
sudo apt install -y awscli

Configure AWS CLI with your credentials:

  
aws configure

Provide your AWS Access Key, Secret Key, region, and output format when prompted.

### Step 2: Create Project Directory

Create a directory for your Terraform project:

  
mkdir ~/terraform-project
cd ~/terraform-project

### Step 3: Initialize Terraform Configuration

Create a simple `main.tf` file. Here's an example that creates an AWS S3 bucket:

  
nano main.tf

Paste the following content:

 hcl
provider "aws" {
  region = "us-east-1"
}

resource "aws_s3_bucket" "example" {
  bucket = "my-unique-bucket-name-12345"
  acl    = "private"

  tags = {
    Name        = "ExampleBucket"
    Environment = "Dev"
  }
}

*Ensure that the `bucket` name is globally unique.*

Save and exit (`Ctrl + O`, `Enter`, `Ctrl + X` in nano).

---

## Running Terraform

With the Terraform project set up, let's initialize, plan, and apply the configuration.

### Step 1: Initialize Terraform

Initialize the project to download the necessary provider plugins:

  
terraform init

You should see output indicating that Terraform has initialized successfully.

### Step 2: Validate Configuration

(Optional) Validate the Terraform files for syntax and internal consistency:

  
terraform validate

You should see:

Success! The configuration is valid.

### Step 3: Create Execution Plan

Generate an execution plan to see what Terraform will do:

  
terraform plan

Review the output to ensure the actions align with your expectations.

### Step 4: Apply Configuration

Apply the changes to create the infrastructure:

  
terraform apply

Type `yes` when prompted to proceed. Terraform will provision the resources and provide output upon completion.

### Step 5: Verify Resources

You can verify the created resources via the AWS Console or using AWS CLI commands.

---

## Using Checkov for Security Analysis

Checkov analyzes your Terraform code for security and compliance issues based on predefined policies.

### Step 1: Run Checkov

Navigate to your Terraform project directory and run Checkov:

  
checkov -d .

### Step 2: Review Checkov Report

Checkov will output a report detailing any security issues found. An example output might look like:

Check: CKV_AWS_20: "S3 bucket should have server-side encryption enabled"
        FAILED for resource: aws_s3_bucket.example
        File: main.tf:6-10

        Guide: https://docs.bridgecrew.io/docs/bc_aws_s3_enable_bucket_encryption

Check: CKV_AWS_21: "S3 bucket should have versioning enabled"
        PASSED for resource: aws_s3_bucket.example

### Step 3: Interpret Results

- **FAILED**: Indicates a security issue that needs to be addressed.
- **PASSED**: Indicates compliance with the corresponding policy.
- **WARN**: Potential issues that may not be critical.

---

## Establishing Security Policies with Checkov

To enhance security, you can customize Checkov policies or enforce certain standards within your Terraform projects.

### 1. **Understand Default Policies**

Checkov comes with a comprehensive set of default policies categorized by cloud providers and compliance frameworks (e.g., CIS, PCI-DSS).

You can view all available checks:

  
checkov --list-available-checks

### 2. **Suppressing False Positives**

Sometimes, a policy might not apply to your specific use case. You can suppress these checks.

**Inline Suppression**:

Add a comment in your Terraform code to skip a specific Checkov check.

 hcl
resource "aws_s3_bucket" "example" {
  bucket = "my-unique-bucket-name-12345"
  acl    = "private"

  # checkov:skip=CKV_AWS_20: Just for demo purposes
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }

  tags = {
    Name        = "ExampleBucket"
    Environment = "Dev"
  }
}

### 3. **Creating Custom Policies**

You can define custom policies using Checkov's policy as code feature.

**Step 1: Create a Custom Policy File**

Create a directory for custom policies:

  
mkdir -p ~/.checkov/policies/

Create a custom policy YAML file:

  
nano ~/.checkov/policies/my_custom_policies. 

Example custom policy enforcing HTTPS for AWS S3 buckets:

  
metadata:
  name: "Ensure S3 bucket enforces HTTPS"
  id: "MY_CUSTOM_POLICY_1"
  category: "Security"
  severity: "HIGH"
definition:
  resource: "aws_s3_bucket"
  checks:
    - type: "property"
      property: "bucket"
      comparison: "contains"
      value: "https"
      operator: "regex_match"
      message: "S3 buckets should enforce HTTPS."

*Note: Adjust the `definition` according to your specific requirements.*

**Step 2: Run Checkov with Custom Policies**

Specify the custom policy directory when running Checkov:

  
checkov -d . --external-checks-dir ~/.checkov/policies/

### 4. **Enforcing Policies in Teams**

- **Version Control Integration**: Ensure all Terraform code is version-controlled (e.g., using Git).
- **Pre-Commit Hooks**: Use Git hooks to run Checkov before commits.
- **CI/CD Integration**: Integrate Checkov into your CI/CD pipelines to enforce policies automatically.

---

## Integrating Checkov into CI/CD Pipelines (Optional)

Integrating Checkov into your CI/CD pipeline ensures that all Terraform code is automatically scanned for security issues before deployment.

### Example: GitHub Actions Integration

1. **Create a GitHub Actions Workflow File**

   In your repository, create `.github/workflows/checkov.yml`:

     
   name: Checkov Terraform Scan

   on:
     push:
       branches: [ main ]
     pull_request:
       branches: [ main ]

   jobs:
     checkov_scan:
       runs-on: ubuntu-latest

       steps:
         - name: Checkout Repository
           uses: actions/checkout@v3

         - name: Set up Python
           uses: actions/setup- @v4
           with:
              -version: '3.x'

         - name: Install Checkov
           run: pip install checkov

         - name: Run Checkov
           run: checkov -d . --output cli

2. **Commit and Push**

   Commit the workflow file and push to GitHub. The workflow will automatically run Checkov on every push and pull request to the `main` branch.

---

## Conclusion

By following this guide, you've successfully set up Terraform and Checkov on Ubuntu, created a simple Terraform project, and implemented security scanning using Checkov. Establishing robust security policies ensures that your infrastructure adheres to best practices and compliance requirements.

**Next Steps:**

- **Explore More Terraform Features**: Dive deeper into Terraform modules, state management, and advanced configurations.
- **Enhance Security Policies**: Customize and expand your Checkov policies to cover more security aspects.
- **Automate Deployments**: Integrate Terraform and Checkov into more comprehensive CI/CD pipelines for seamless infrastructure management.

---

**Resources:**

- [Terraform Documentation](https://www.terraform.io/docs)
- [Checkov Documentation](https://www.checkov.io/)

Feel free to reach out if you have any questions or need further assistance!
