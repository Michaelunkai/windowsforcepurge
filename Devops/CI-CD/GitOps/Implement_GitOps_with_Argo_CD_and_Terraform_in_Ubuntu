1) getkube

2)

curl -s https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml | kubectl apply -f - && \
curl -LO https://releases.hashicorp.com/terraform/$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)/terraform_$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)_linux_amd64.zip && \
unzip terraform_$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)_linux_amd64.zip && \
sudo mv terraform /usr/local/bin/ && kubectl create namespace argocd && kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml && curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x argocd-linux-amd64 && sudo mv argocd-linux-amd64 /usr/local/bin/argocd && clear && kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode && kubectl port-forward svc/argocd-server -n argocd 8080:443




3)
in new terminal:

argocd login localhost:8080
# Username: admin
# Password: (use the password you obtained earlier)




4)
 Create a GitOps Repository
Create a new Git repository that will store your Terraform configuration and Kubernetes manifests.

git init my-gitops-repo
cd my-gitops-repo
 

Add Terraform Configuration
Create a simple Terraform configuration. For example, create a main.tf file:

provider "kubernetes" {
  config_path = "~/.kube/config"
}

resource "kubernetes_namespace" "example" {
  metadata {
    name = "example"
  }
}


Initialize and Apply Terraform Configuration
Initialize and apply the Terraform configuration:



terraform init
terraform apply -auto-approve
Step 11: Configure Argo CD to Sync with Git Repository
Create an Argo CD application that syncs with your Git repository. Save the following YAML as argo-app.yaml:

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: gitops-app
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'https://github.com/your-username/my-gitops-repo'
    targetRevision: HEAD
    path: .
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
Apply the configuration:

kubectl apply -f argo-app.yaml

Monitor and Manage the Application in Argo CD
You can now manage and monitor your application in the Argo CD UI. Access it at http://localhost:8080 and log in with the credentials obtained earlier.

This setup demonstrates a basic GitOps workflow using Argo CD and Terraform on Ubuntu. Feel free to expand on this foundation by adding more complex Terraform configurations and Kubernetes manifests as needed.







