# Comprehensive Tutorial on Using PowerShell in Windows 11 to Set Up and Compile C++ Code with MSVC, GCC (MinGW/TDM-GCC), Clang, VS Code, CMake, SCons, and WSL

This tutorial covers how to install, configure, and use various C++ compilation toolchains and development environments on Windows 11 using PowerShell. We’ll walk through detailed steps for setting up Microsoft Visual C++ (MSVC) via Visual Studio, GCC compilers (MinGW-w64 and TDM-GCC), Clang/LLVM, IDEs like Visual Studio Code (and others), cross-platform build systems like CMake and SCons, and even Windows Subsystem for Linux (WSL).

---

## 1. Microsoft Visual C++ (MSVC) – Visual Studio

### A. Installing Visual Studio or Visual Studio Build Tools

You can install Visual Studio Community (which includes the C++ workload) using Winget from PowerShell:

```powershell
winget install --id Microsoft.VisualStudio.2022.Community --exact --accept-package-agreements --accept-source-agreements
```

*Tip:* For only build tools, replace the package ID with the appropriate Build Tools ID (e.g., `Microsoft.VisualStudio.2022.BuildTools`).

### B. Setting Up the Developer Environment

Visual Studio installs a setup batch file (usually named **VsDevCmd.bat**) that configures your environment. In PowerShell:

1. **Locate the Batch File:**  
   Typically found at:  
   `C:\Program Files (x86)\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat`  
   *(Adjust the path if you installed a different edition or version.)*

2. **Run the Batch File in PowerShell:**  
   ```powershell
   & "C:\Program Files (x86)\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat"
   ```

3. **Compile a C++ File:**  
   With the environment set up, compile your file:
   ```powershell
   cl /EHsc your_program.cpp
   ```

---

## 2. GCC on Windows

### A. Using MinGW-w64

#### Installation via Winget

Install MinGW-w64:
```powershell
winget install --id=MinGW.MinGW -e --accept-package-agreements --accept-source-agreements
```

#### Configuring the PATH

After installing, add MinGW’s `bin` folder to your PATH (update the path to your actual installation directory):
```powershell
$env:Path += ";C:\Path\To\MinGW\bin"
```

#### Compiling with g++

Now compile your C++ file:
```powershell
g++ -o your_program.exe your_program.cpp
```

### B. Using TDM-GCC

1. **Installation:**  
   Download and install TDM-GCC from the [TDM-GCC website](https://jmeubank.github.io/tdm-gcc/).

2. **Configure PATH:**  
   Ensure the TDM-GCC `bin` directory is added to your PATH:
   ```powershell
   $env:Path += ";C:\Path\To\TDM-GCC\bin"
   ```

3. **Compile with g++:**  
   Use the same command as for MinGW:
   ```powershell
   g++ -o your_program.exe your_program.cpp
   ```

---

## 3. Clang/LLVM on Windows

### A. Installation via Winget

Install LLVM (which includes Clang) with:
```powershell
winget install --id=LLVM.llvm --exact --accept-package-agreements --accept-source-agreements
```

### B. Setting Up the PATH

If LLVM’s installer does not add it to your PATH automatically, add it manually:
```powershell
$env:Path += ";C:\Program Files\LLVM\bin"
```

### C. Compiling with Clang

You have two options:

- **Using clang++ (GCC-like syntax):**
  ```powershell
  clang++ -o your_program.exe your_program.cpp
  ```

- **Using clang-cl (MSVC-compatible):**
  ```powershell
  clang-cl /EHsc your_program.cpp
  ```

---

## 4. Integrated Development Environments (IDEs) via PowerShell

While IDEs are mostly GUI-based, you can install and launch them via PowerShell.

### A. Visual Studio Code

#### Installation via Winget

Install VS Code:
```powershell
winget install --id=Microsoft.VisualStudioCode --exact --accept-package-agreements --accept-source-agreements
```

#### Setting Up a Build Task in VS Code

1. **Open Your Project Folder:**  
   Navigate to your project folder and open it in VS Code:
   ```powershell
   code .
   ```

2. **Create a Task Configuration:**  
   Inside your project folder, create a `.vscode` directory with a `tasks.json` file:
   ```json
   {
     "version": "2.0.0",
     "tasks": [
       {
         "label": "Build C++ with g++",
         "type": "shell",
         "command": "g++",
         "args": [
           "-o",
           "your_program.exe",
           "your_program.cpp"
         ],
         "group": {
           "kind": "build",
           "isDefault": true
         },
         "problemMatcher": "$gcc"
       }
     ]
   }
   ```
3. **Build the Project:**  
   Use VS Code’s integrated task runner to build your C++ file.

### B. Other IDEs (Code::Blocks, Dev-C++)

- **Installation via Winget (if available):**
  ```powershell
  winget install --id=CodeBlocks.CodeBlocks --exact --accept-package-agreements --accept-source-agreements
  ```
- **Usage:**  
  Launch the IDE from the Start Menu or via PowerShell if you know the executable path. These IDEs typically come bundled with a GCC compiler.

---

## 5. Cross-Platform Build Systems

### A. CMake

#### Installation via Winget

Install CMake:
```powershell
winget install --id=Kitware.CMake --exact --accept-package-agreements --accept-source-agreements
```

#### Using CMake in PowerShell

1. **Create a `CMakeLists.txt` File:**  
   In your project directory, write your build configuration.

2. **Generate a Build System:**  
   For a Visual Studio solution:
   ```powershell
   cmake -G "Visual Studio 17 2022" .
   ```
   Or for MinGW Makefiles:
   ```powershell
   cmake -G "MinGW Makefiles" .
   ```
3. **Build Your Project:**  
   Use the generated solution or makefile to compile your code.

### B. SCons

#### Installation via pip

Install SCons using pip (ensure Python is installed):
```powershell
pip install scons
```

#### Setting Up and Running SCons

1. **Create an SConstruct File:**  
   In your project directory, create an `SConstruct` file with your build instructions.
2. **Build with SCons:**
   ```powershell
   scons
   ```

*Similar steps apply to other build systems like Meson or Premake—follow their documentation for installation and configuration.*

---

## 6. Windows Subsystem for Linux (WSL)

### A. Installing WSL

Run PowerShell as Administrator and execute:
```powershell
wsl --install
```
*This command installs the default Linux distribution (usually Ubuntu) along with WSL. Reboot your machine if prompted.*

### B. Configuring and Using a C++ Compiler in WSL

1. **Launch WSL:**  
   In PowerShell, type:
   ```powershell
   wsl
   ```
2. **Install Build Essentials in WSL:**  
   Inside the WSL terminal, run:
   ```bash
   sudo apt update && sudo apt install build-essential
   ```
3. **Compile Your C++ File:**
   ```bash
   g++ -o your_program your_program.cpp
   ```
*Note:* This produces a Linux executable. For a Windows executable, additional cross-compilation steps are necessary.

---

## Final Tips and Environment Persistence

- **Persisting PATH Changes:**  
  To permanently add a directory to your PowerShell PATH, edit your PowerShell profile (e.g., `Microsoft.PowerShell_profile.ps1`).

- **Running as Administrator:**  
  Some commands (like installing WSL) require PowerShell to be run with elevated privileges.

- **Keep Tools Updated:**  
  Package names and installation methods can change; always consult the latest documentation or Winget repository for updates.

This extensive tutorial should provide you with clear, step-by-step instructions to set up and use various C++ compilation tools on Windows 11 using PowerShell. Happy coding!
