Sure! Here is the step-by-step tutorial with clear titles for each section.

---

# Step-by-Step Blockchain Development on Ubuntu

This tutorial will guide you through setting up a blockchain development environment on Ubuntu using Ethereum and Truffle. You will learn how to install the necessary tools, create a smart contract, deploy it, and interact with it.

---

## Step 1: Install Node.js and npm

Truffle and many blockchain tools require Node.js. Install Node.js and npm using the following commands:

  
sudo apt update
sudo apt install nodejs npm -y

Verify the installation:

  
nodejs -v
npm -v

---

## Step 2: Install Truffle and Ganache

Truffle is a development framework for Ethereum, and Ganache is a personal blockchain for Ethereum development.

Install Truffle and Ganache:

  
sudo npm install -g truffle
sudo npm install -g ganache-cli

Verify the installation:

  
truffle version
ganache-cli --version

---

## Step 3: Initialize a Truffle Project

Create a new directory for your project and initialize a Truffle project:

  
mkdir my-blockchain-project
cd my-blockchain-project
truffle init

---

## Step 4: Start Ganache

Start Ganache to run a local blockchain:

  
ganache-cli

---

## Step 5: Create a Smart Contract

Navigate to the `contracts` directory and create a new file named `MyContract.sol` with the following content:

 solidity
pragma solidity ^0.8.0;

contract MyContract {
    string public message;

    constructor(string memory initialMessage) {
        message = initialMessage;
    }

    function setMessage(string memory newMessage) public {
        message = newMessage;
    }
}

---

## Step 6: Compile the Smart Contract

Compile your smart contract using Truffle:

  
truffle compile

---

## Step 7: Deploy the Smart Contract

Create a new migration file in the `migrations` directory named `2_deploy_contracts.js` with the following content:

 javascript
const MyContract = artifacts.require("MyContract");

module.exports = function(deployer) {
  deployer.deploy(MyContract, "Hello, Blockchain!");
};

Deploy the contract:

  
truffle migrate

---

## Step 8: Interact with the Smart Contract

Open the Truffle console to interact with your deployed contract:

  
truffle console

In the Truffle console, get the deployed contract instance and call its methods:

 javascript
let instance = await MyContract.deployed();
let message = await instance.message();
console.log(message);  // Output: Hello, Blockchain!

await instance.setMessage("Hello, Truffle!");
message = await instance.message();
console.log(message);  // Output: Hello, Truffle!

---

## Step 9: Test the Smart Contract

Write tests for your contract in the `test` directory. Create a file named `my_contract_test.js`:

 javascript
const MyContract = artifacts.require("MyContract");

contract("MyContract", accounts => {
  it("should set and get message correctly", async () => {
    const instance = await MyContract.deployed();

    let message = await instance.message();
    assert.equal(message, "Hello, Blockchain!");

    await instance.setMessage("Hello, Truffle!");
    message = await instance.message();
    assert.equal(message, "Hello, Truffle!");
  });
});

Run the tests:

  
truffle test

---

This basic setup will get you started with blockchain development on Ubuntu using Ethereum and Truffle. If you have any specific questions or need further details on any step, feel free to ask!
