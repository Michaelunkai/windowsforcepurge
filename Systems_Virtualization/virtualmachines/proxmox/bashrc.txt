# ~/.bashrc: executed by bash(1) for non-login shells.

# Note: PS1 and umask are already set in /etc/profile. You should not
# need this unless you want different defaults for root.
# PS1='${debian_chroot:+($debian_chroot)}\h:\w\$ '
# umask 022

# You may uncomment the following lines if you want `ls' to be colorized:
# export LS_OPTIONS='--color=auto'
# eval "$(dircolors)"
# alias ls='ls $LS_OPTIONS'
# alias ll='ls $LS_OPTIONS -l'
# alias l='ls $LS_OPTIONS -lA'
#
# Some more alias to avoid making mistakes:
# alias rm='rm -i'
# alias cp='cp -i'
# alias mv='mv -i'


alias plex="pct exec 100 -- fstrim -av"
alias userver="pct exec 102 -- fstrim -av"
alias ccupload="pct exec 103 -- fstrim -av"
alias brc="nano /root/.bashrc"
alias brc1="source /root/.bashrc"
alias catrc="cat /root/.bashrc"
alias cc="clear"
alias pl="pct enter 100"
alias cdv="cd /var/lib/vz"
alias update="apt update && apt upgrade -y"
alias ccftp="pct stop 102 && pct destroy 102 && pct restore 102 /var/lib/vz/dump/vzdump-lxc-102-2024_08_30-17_07_41.tar.zst --storage local --start 1 --hostname UploadServer"
alias ram='df -h /var/lib/vz | awk '\''NR==1{print $2, $3, $4, $5} NR==2{print $2, $3, $4, $5}'\'''
alias restore='docker run -v /var/lib/vz/template/iso/:/c/ michadockermisha/backup:proxiso sh -c "apk add --no-cache rsync && rsync -av /home/* /c/ && cd /c/ && docker run -v /var/lib/vz/dump/:/c/ michadockermisha/backup:proxdump sh -c \"apk add --no-cache rsync && rsync -av /home/* /c/ && cd /c/\"" && docker system prune -af && docker volume prune -f && docker container prune -f && docker image prune -af && docker network prune -f'
alias backupiso='cdv && cd template/iso && docker build -t michadockermisha/backup:proxiso . && docker push michadockermisha/backup:proxiso && dkill'
alias backupconf='bash /root/backupconf.sh'
alias backup="dubu && backupconf"
alias space="for CTID in \$(pct list | awk 'NR>1 {print \$1}'); do NAME=\$(pct list | awk -v id=\$CTID '\$1 == id {print \$3}'); SIZE=\$(pct config \$CTID | grep '^rootfs' | awk -F'size=' '{print \$2}'); USED=\$(pct exec \$CTID -- df / | awk 'NR==2 {print \$3}'); USED_HUMAN=\$(pct exec \$CTID -- df -h / | awk 'NR==2 {print \$3}'); echo \"CTID \$CTID (Name: \$NAME): Size: \$SIZE, Used: \${USED_HUMAN} (\${USED}K)\"; done"
alias dkill='docker stop $(docker ps -aq) || true && docker rm $(docker ps -aq) || true && ( [ "$(docker ps -q)" ] || docker rmi $(docker images -q) || true ) && ( [ "$(docker images -q)" ] || docker system prune -a --volumes --force ) && docker network prune --force || true'
alias ubudocker="cd && ./ubu.sh && dkill"
alias backupubu="bash /root/backup_vm_101.sh"
alias snapubu="cd && ./manage_snapshots_vm_101.sh"
alias reubu="cd && ./restore_and_start_vm.sh"
alias rmpct='for id in $(pct list | awk '\''NR>1 {print $1}'\'' | grep -Ev '\''^(100|102)$'\''); do echo "Shutting down container $id..."; pct shutdown $id && echo "Destroying container $id..." && pct destroy $id; done'
alias scpmyg="sshpass -p 'blackablacka2' ssh micha@192.168.1.178 \"powershell -Command \\\"scp -v 'C:/study/programming/python/apps/pyqt5menus/GamesDockerMenu/nogui/games_data.json' ubuntu@192.168.1.193:/home/ubuntu\\\"\""
alias udocker="scpmyg && backupubu && snapubu && ubudocker"
alias ex="exit"
alias backiso="cd /var/lib/vz/template/iso &&  docker build -t michadockermisha/backup:proxiso . && docker push michadockermisha/backup:proxiso && docker rmi michadockermisha/backup:proxdump michadockermisha/backup:proxiso && docker system prune -af && docker volume prune -f && docker container prune -f && docker image prune -af && docker network prune -f"
alias bubu="ccubu && backupubu && reubu && snapubu && udocker"
alias s='echo "root ALL=(ALL) NOPASSWD: ALL" | sudo EDITOR="tee -a" visudo && sudo su'
alias ccubu="du -sh /var/lib/vz/images/101 && cd /var/lib/vz/images/101 && qemu-img convert -O qcow2 vm-101-disk-0.qcow2 vm-101-disk-1.qcow2 && mv vm-101-disk-1.qcow2 vm-101-disk-0.qcow2 && du -sh /var/lib/vz/images/101"
function allrc {
echo -e "\033[31mProxmox Host:\033[0m" && cat ~/.bashrc && echo && for id in $(pct list | awk 'NR>1 {print $1}'); do name=$(pct config $id | grep -oP '^hostname: \K.*'); echo -e "\033[31m$name ($id):\033[0m"; pct exec $id -- cat ~/.bashrc || echo "No ~/.bashrc found"; echo; done
}


cct() {
    if [ -z "$1" ]; then
        echo "Usage: cct <hostname>"
        return 1
    fi
    HOSTNAME=$1
    
    # Prompt for CTID
    read -p "Enter desired CTID (container number): " CTID
    
5B    # Validate CTID is a number
    if ! [[ "$CTID" =~ ^[0-9]+$ ]]; then
        echo "Error: CTID must be a number"
        return 1
    fi
    
    # Check if CTID already exists
    if pct status $CTID >/dev/null 2>&1; then
        echo "Error: CTID $CTID already exists"
        return 1
    fi
    
    # Set fixed password for root
    PASSWORD="123456"
    
    TEMPLATE="local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
    STORAGE="local"
    CORES=4
    MEMORY=2000
    SWAP=2000
    DISK_SIZE="1000"
    NAMESERVER="8.8.8.8"
    BRIDGE="vmbr0"
    NETWORK="name=eth0,bridge=${BRIDGE},ip=dhcp,ip6=dhcp"
    
    echo "Creating container with CTID: $CTID and Hostname: $HOSTNAME"
    pct create $CTID $TEMPLATE \
        --hostname $HOSTNAME \
        --password "$PASSWORD" \
        --cores $CORES \
        --memory $MEMORY \
        --swap $SWAP \
        --rootfs "$STORAGE:${DISK_SIZE}" \
        --net0 $NETWORK \
        --nameserver $NAMESERVER \
        --start 0  # Don't start immediately
    
    if [ $? -ne 0 ]; then
        echo "Failed to create container."
        return 1
    fi
    
    echo "Container created successfully. Setting up SSH..."
    
    # Start the container
    pct start $CTID
    
    # Wait for container to be ready
    echo "Waiting for container to initialize..."
    sleep 10
    
    # Execute commands inside the container to set up SSH
    pct exec $CTID -- bash -c '
        # Update package list
        apt-get update
        
        # Install SSH server
        apt-get install -y openssh-server
        
        # Configure SSH to allow root login with password
        sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/" /etc/ssh/sshd_config
        sed -i "s/PermitRootLogin prohibit-password/PermitRootLogin yes/" /etc/ssh/sshd_config
        
        # Enable password authentication
        sed -i "s/#PasswordAuthentication yes/PasswordAuthentication yes/" /etc/ssh/sshd_config
        
        # Enable SSH service
        systemctl enable ssh
        
        # Start SSH service
        systemctl start ssh
        
        # Set root password explicitly
        echo "root:123456" | chpasswd
        
        # Restart SSH service to apply changes
        systemctl restart ssh
    '
    
    # Get the container's IP address
    IP=$(pct exec $CTID -- ip addr show eth0 | grep "inet " | awk "{print \$2}" | cut -d/ -f1)
    
    # Final status check
    echo "Container setup completed."
    echo "Container '$HOSTNAME' (CTID: $CTID) status:"
    pct status $CTID
    echo "Network configuration:"
    pct config $CTID | grep net
    if [ ! -z "$IP" ]; then
        echo "Container IP address: $IP"
        echo "You can connect via SSH using: ssh root@$IP"
        echo "Root password is: 123456"
    else
        echo "IP address not yet assigned. Please check network configuration."
    fi
    
    # Final SSH status check
    echo "SSH service status:"
    pct exec $CTID -- systemctl status ssh | grep Active
}
alias ss="sudo rtcwake -m mem -s"
alias top="du -sm * | sort -n"
alias restoreconf="bash /root/restoreconf.sh"
alias scprc="scp -p /root/.bashrc micha@192.168.1.178:'C:/study/virtualmachines/proxmox/bashrc.txt'"
alias dtemp="pveam download local ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
alias cprc='for CTID in $(pct list | awk '\''NR>1 {print $1}'\''); do pct exec $CTID -- bash -c "cat > /root/.bashrc" < /root/.bashrc; done'
alias updates="bash /root/update-lxcs.sh && bash /root/updateUbu.sh && update"
alias rollubu='qm rollback 101 snap'
alias rmsources='rm -rf /etc/apt/sources.list.d/*'
alias tv="cd /home/TV"
alias anime="cd /home/anime"
alias movies="cd /home/movies"
addrc() {
  # Read the host's .bashrc content safely
  bashrc_content=$(base64 /root/.bashrc)

  # Iterate through all running containers
  for ct in $(pct list | awk 'NR>1 && $2=="running" {print $1}'); do
    pct exec $ct -- bash -c "
      cp /root/.bashrc /root/.bashrc.bak 2>/dev/null || true
      echo '$bashrc_content' | base64 -d > /root/.bashrc
      source /root/.bashrc
    "
  done
}
alias fullup="updates && clean && reboot"

alias backup="ssh-keygen -f \"/root/.ssh/known_hosts\" -R \"192.168.1.178\" && killall -9 sshfs; fusermount -u /mnt/f; apt install sshfs -y && sudo mkdir -p /mnt/f && sudo chown root:root /mnt/f && sshfs micha@192.168.1.178:\"F:\" /mnt/f -o allow_other,default_permissions && cd /mnt/f && vzdump --all --compress zstd --mode snapshot --dumpdir /mnt/f/proxmox && rsync -aAXvP --delete --info=progress2 --exclude=/mnt/f/proxmox --exclude=/proc --exclude=/sys --exclude=/dev --exclude=/run --exclude=/tmp / /mnt/f/proxmox/"
alias restore="ssh-keygen -f \"/root/.ssh/known_hosts\" -R \"192.168.1.178\" && killall -9 sshfs; fusermount -u /mnt/f; apt install sshfs -y && sudo mkdir -p /mnt/f && sudo chown root:root /mnt/f && sshfs micha@192.168.1.178:\"F:\" /mnt/f -o allow_other,default_permissions && cd /mnt/f && rsync -aAXvP --delete --info=progress2 /mnt/f/proxmox/ /"
alias dubu='rm -rf /var/lib/vz/dump/ubu && mkdir /var/lib/vz/dump/ubu && echo $'"'"'# Use a base image\nFROM alpine:latest\n\n# Install rsync\nRUN apk --no-cache add rsync\n\n# Set the working directory\nWORKDIR /app\n\n# Copy everything within the current path to /home/\nCOPY . /home/\n\n# Default runtime options\nCMD ["rsync", "-aP", "/home/", "/home/"]'"'"' > /var/lib/vz/dump/ubu/Dockerfile && cdv && cd dump && cp -r *101* ubu && cd ubu && docker build -t michadockermisha/backup:ubuntudesktop . && docker push michadockermisha/backup:ubuntudesktop && cd .. && rm -rf ubu && dkill'
alias cclean="rollubu && fullup"
alias clean='bash /root/cleanprox.sh && plex && bash /root/auto_trim_LXC.sh && rm -rf /var/tmp/*'
alias sleep=" sudo rtcwake -m mem -t $(date -d ''' + $WakeTime + ''' +%s) >/dev/null 2>&1 &"
alias stopr="sudo systemctl disable --now rtcwake.timer && sudo rm /etc/systemd/system/rtcwake.timer /etc/systemd/system/rtcwake.service && sudo systemctl daemon-reload"
