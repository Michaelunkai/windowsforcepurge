# Comprehensive Step-by-Step Tutorial: Setting Up, Running, and Establishing Disaster Recovery (DR) Sites for Failover on Ubuntu Using Proxmox VE

Ensuring high availability and resilience in your virtualized environment is crucial for minimizing downtime and maintaining business continuity. This comprehensive tutorial will guide you through **setting up, running, and establishing Disaster Recovery (DR) sites for failover** using **Proxmox Virtual Environment (VE)** on **Ubuntu Server**. By following these detailed steps, you'll create a robust infrastructure capable of handling failover scenarios effectively.

---

## Table of Contents

1. [Prerequisites](#prerequisites)
2. [Installing Proxmox VE on Ubuntu](#installing-proxmox-ve-on-ubuntu)
3. [Configuring a Proxmox Cluster](#configuring-a-proxmox-cluster)
4. [Setting Up Storage Replication](#setting-up-storage-replication)
5. [Establishing Disaster Recovery (DR) Sites](#establishing-disaster-recovery-dr-sites)
6. [Configuring Failover Mechanisms](#configuring-failover-mechanisms)
7. [Testing the Failover Setup](#testing-the-failover-setup)
8. [Best Practices and Recommendations](#best-practices-and-recommendations)

---

## Prerequisites

Before embarking on this setup, ensure you have the following:

### **Hardware Requirements:**
- **Servers:** At least two servers (nodes) with Ubuntu Server 22.04 LTS or later installed.
- **Resources:** Sufficient CPU, RAM, and storage to handle your virtual machines (VMs) and containers.
- **Networking:** Reliable network connectivity between nodes, preferably on a dedicated management network.

### **Software Requirements:**
- **Operating System:** Ubuntu Server (latest LTS version recommended).
- **Proxmox VE Packages:** Latest Proxmox VE packages compatible with Ubuntu.
- **Access:** SSH access to all nodes.
- **Network Configurations:** Proper DNS setup and network configurations.

### **Other Considerations:**
- **Backups:** Implement backup solutions alongside replication.
- **Static IPs:** Assign static IP addresses to all nodes.
- **Firewall:** Configure firewalls to allow necessary Proxmox cluster traffic.

---

## Installing Proxmox VE on Ubuntu

Although Proxmox VE is primarily designed for Debian-based systems, it can be integrated with Ubuntu with careful adjustments.

### **1. Update Ubuntu**

Ensure your system is up to date.

  
sudo apt update && sudo apt upgrade -y
sudo reboot

### **2. Configure the Hosts File**

Edit the `/etc/hosts` file on each node to include all cluster nodes for proper name resolution.

  
sudo nano /etc/hosts

Add entries similar to:

192.168.1.101 proxmox-node1
192.168.1.102 proxmox-node2
192.168.1.103 proxmox-node3

*Replace the IP addresses and hostnames according to your network setup.*

### **3. Add Proxmox VE Repository**

Add the Proxmox VE repository to your Ubuntu system.

  
echo "deb http://download.proxmox.com/debian/pve buster pve-no-subscription" | sudo tee /etc/apt/sources.list.d/pve-install-repo.list

> **Note:** Replace `buster` with the appropriate Debian codename if necessary. Proxmox is based on Debian, so ensure compatibility.

### **4. Add the Proxmox VE Repository Key**

Import the Proxmox repository signing key to authenticate packages.

  
wget -qO- https://enterprise.proxmox.com/debian/proxmox-release-buster.gpg | sudo tee /etc/apt/trusted.gpg.d/proxmox-release-buster.gpg

*Adjust the URL if using a different Proxmox version.*

### **5. Update Package Lists**

Refresh the package database to include Proxmox packages.

  
sudo apt update

### **6. Install Proxmox VE Packages**

Install Proxmox VE along with necessary dependencies.

  
sudo apt install proxmox-ve postfix open-iscsi -y

- **Postfix Configuration:** During installation, select "Internet Site" and set the system mail name appropriately.

### **7. Disable Conflicting Ubuntu Services**

Proxmox manages certain services that may conflict with Ubuntu's defaults.

- **Disable UFW (Uncomplicated Firewall):**

    
  sudo systemctl disable ufw
  sudo systemctl stop ufw

- **Disable Firewalld (if installed):**

    
  sudo systemctl disable firewalld
  sudo systemctl stop firewalld

### **8. Reboot the Server**

Apply all changes by rebooting.

  
sudo reboot

### **9. Access the Proxmox Web Interface**

After reboot, access Proxmox via a web browser:

https://<node-ip>:8006

*Log in using your Ubuntu credentials (typically `root` with the system password).*

---

## Configuring a Proxmox Cluster

Creating a Proxmox cluster allows multiple nodes to work together, enabling features like high availability and failover.

### **1. Initialize the Cluster on the First Node**

On the primary node (e.g., `proxmox-node1`):

  
sudo pvecm create my-cluster

*Replace `my-cluster` with your desired cluster name.*

### **2. Verify Cluster Status**

Check the cluster status to ensure it's initialized correctly.

  
sudo pvecm status

*You should see details about the cluster, including the node count.*

### **3. Join Additional Nodes to the Cluster**

On each additional node (e.g., `proxmox-node2` and `proxmox-node3`):

1. **Fetch Cluster Information from the Primary Node:**

     
   sudo pvecm add 192.168.1.101

   *Replace `192.168.1.101` with the IP address of your primary node.*

2. **Enter the Root Password of the Primary Node When Prompted.**

3. **Verify the Node Has Joined:**

     
   sudo pvecm status

   *All nodes should now be listed in the cluster status.*

### **4. Configure SSH Trust Between Nodes (Optional but Recommended)**

Set up SSH key-based authentication to facilitate seamless communication.

On each node:

  
ssh-keygen -t rsa -b 4096 -C "proxmox-cluster" -N "" -f ~/.ssh/id_rsa
ssh-copy-id root@<other-node-ip>

*Repeat this process for each node to ensure password-less SSH access.*

---

## Setting Up Storage Replication

Replicating storage across nodes ensures that your VM data is synchronized, which is vital for failover.

### **1. Choose a Replication Method**

Proxmox supports various replication methods:

- **Proxmox Built-in Replication (Requires Ceph or Shared Storage)**
- **DRBD (Distributed Replicated Block Device)**
- **ZFS Replication**

For simplicity, we'll use **ZFS Replication** in this tutorial.

### **2. Install ZFS on All Nodes**

Install ZFS utilities to manage ZFS pools.

  
sudo apt install zfsutils-linux -y

### **3. Configure ZFS Pools**

Create identical ZFS pools on all nodes to maintain consistency.

Example:

  
sudo zpool create pool1 mirror /dev/sdb /dev/sdc

*Adjust device names and pool configurations based on your hardware.*

### **4. Create ZFS Datasets for VMs**

Create datasets within the ZFS pool to organize VM data.

  
sudo zfs create pool1/vm-data

### **5. Add ZFS Storage to Proxmox**

Integrate the ZFS storage into Proxmox via the web interface.

1. **Navigate to:** `Datacenter` > `Storage`.
2. **Click on:** `Add` and select `ZFS`.
3. **Configure the Storage:**
   - **ID:** `vm-data`
   - **ZFS Pool:** `pool1/vm-data`
   - **Content:** Select relevant options (e.g., Disk image, Container).
4. **Click on:** `Add` to finalize.

### **6. Enable Replication**

Set up scheduled replication tasks to synchronize data between nodes.

1. **Set Up SSH Keys for rsync (if using rsync):**

   Ensure nodes can communicate via SSH without passwords (similar to previous SSH trust setup).

2. **Configure Replication Jobs:**

   In the Proxmox web interface:

   - **Navigate to:** `Datacenter` > `Storage` > `vm-data` > `Replication`.
   - **Click on:** `Add`.
   - **Configure the Replication Job:**
     - **Source:** Select the source node and storage.
     - **Target:** Select the target node and storage.
     - **Schedule:** Define the replication frequency (e.g., hourly).
     - **Options:** Choose to replicate all VMs or specific ones.
   - **Click on:** `Create` to establish the job.

3. **Monitor Replication Status:**

   Regularly check replication logs and statuses to ensure synchronization is functioning correctly.

---

## Establishing Disaster Recovery (DR) Sites

A Disaster Recovery site is a separate location that takes over operations if the primary site fails. Establishing DR sites enhances your infrastructure's resilience.

### **1. Assess DR Site Requirements**

Consider the following when planning your DR site:

- **Geographical Separation:** Ensure the DR site is geographically distant from the primary site to mitigate risks like natural disasters.
- **Infrastructure Similarity:** The DR site should have similar hardware or compatible cloud resources.
- **Network Reliability:** Ensure robust and fast connectivity between primary and DR sites.

### **2. Set Up a Secondary Proxmox Cluster (DR Cluster)**

You have two options for configuring the DR site:

#### **Option 1: Extend Existing Cluster**

- **Advantages:** Simplifies management by maintaining a single cluster.
- **Steps:**
  - Add DR site nodes to the existing Proxmox cluster.
  - Ensure network configurations allow seamless communication between all nodes, including those at the DR site.

#### **Option 2: Create a Separate DR Cluster**

- **Advantages:** Provides true disaster isolation, avoiding single points of failure.
- **Steps:**
  - Set up a completely separate Proxmox cluster at the DR site.
  - Use replication tools to synchronize data between the primary and DR clusters.

> **Recommendation:** **Option 2** is generally preferred for authentic DR scenarios, ensuring complete isolation from the primary site's potential failures.

### **3. Configure Storage Replication to the DR Site**

If you opted for a separate DR cluster, synchronize storage between the primary and DR clusters.

#### **Using rsync for Replication:**

1. **Set Up SSH Trust Between Primary and DR Clusters:**

   Ensure password-less SSH access between the primary cluster and the DR cluster nodes.

2. **Create a Cron Job for Regular Syncing:**

   Automate the replication process using cron.

     
   crontab -e

   Add a line like:

     
   0 * * * * rsync -avz /var/lib/vz root@dr-site:/var/lib/vz

   *This example synchronizes the `/var/lib/vz` directory every hour. Adjust paths and schedules as needed.*

#### **Alternative Methods:**

- **DRBD:** For real-time block-level replication.
- **Proxmox Built-in Replication:** If using compatible storage solutions like Ceph.

### **4. Synchronize Configuration Files**

Ensure that configurations (e.g., VM definitions, network settings) are consistent between primary and DR sites.

#### **Using Configuration Management Tools:**

Leverage tools like **Ansible**, **Puppet**, or **Chef** to automate and manage configuration synchronization.

#### **Manual Synchronization:**

Periodically copy configuration files using `rsync` or similar tools.

  
rsync -avz /etc/pve root@dr-site:/etc/pve

*Ensure that sensitive data is handled securely during synchronization.*

---

## Configuring Failover Mechanisms

Failover ensures that operations seamlessly switch to the DR site in the event of a primary site failure.

### **1. Implement High Availability (HA) in Proxmox**

Proxmox VE supports High Availability clustering, which can automatically restart VMs on other nodes if a node fails.

> **Note:** HA clustering is most effective within a single cluster. For DR across separate clusters, additional configurations are necessary.

#### **Steps to Implement HA:**

1. **Ensure All Nodes Are Part of the Same Cluster:**

   HA works best within a unified cluster environment.

2. **Configure HA Groups:**

   - **Navigate to:** `Datacenter` > `HA`.
   - **Click on:** `Groups` and create an HA group.
   - **Assign VMs to the HA Group:** Select VMs that should be highly available.

### **2. Set Resource Limits and Constraints**

Define resource limits to prevent overloading nodes during failover scenarios.

- **Configure CPU and Memory Limits:** Ensure that nodes have sufficient resources to handle additional VMs during failover.
- **Set VM Start Order:** Prioritize critical VMs to start first in failover scenarios.

### **3. Monitor Cluster Health**

Utilize Proxmox's built-in monitoring tools to keep track of cluster health and HA status.

- **Regularly Check:** Node statuses, resource utilization, and replication logs.
- **Set Up Alerts:** Configure alerts for critical events or failures.

### **4. Configure DR Site Failover Mechanisms**

For separate DR clusters, implement additional failover strategies:

- **DNS Failover:**
  - Update DNS records to point to the DR site if the primary site becomes unreachable.
  - Utilize DNS providers that support automatic failover.

- **Load Balancers:**
  - Use load balancers to distribute traffic and redirect it to the DR site during failures.
  - Configure health checks to detect primary site outages.

- **Automated Scripts:**
  - Develop scripts to monitor primary site health and switch operations to the DR site upon failure detection.
  - Ensure scripts handle failback operations when the primary site is restored.

---

## Testing the Failover Setup

Regular testing is essential to ensure that your DR and failover mechanisms function correctly when needed.

### **1. Simulate Failures**

Conduct simulated failure scenarios to test the robustness of your setup.

- **Node Failure:**
  - Shut down a node and observe if VMs migrate or restart on other nodes.
  
    
  sudo shutdown now
  
- **Storage Failure:**
  - Disconnect or simulate storage loss and check replication and recovery processes.
  
- **Network Failure:**
  - Simulate network outages between nodes and test connectivity and failover responses.

### **2. Validate Replication**

Ensure that data is accurately replicated to the DR site.

- **Check Replication Logs:**
  - Review logs to confirm successful replication operations.
  
    
  tail -f /var/log/pve/tasks/index
  
- **Verify Data Integrity:**
  - Inspect data on the DR site to ensure consistency and integrity.

### **3. Test DR Site Activation**

Perform a full failover to the DR site to validate operational continuity.

- **Switch DNS or Load Balancer:**
  - Redirect traffic to the DR site using DNS updates or load balancer configurations.
  
- **Start VMs from the DR Site:**
  - Manually start VMs on the DR site if not automated.
  
- **Verify Application Functionality:**
  - Ensure that applications and services are running correctly on the DR site.

### **4. Review and Document Results**

After testing, document the outcomes to identify any issues and improve the setup.

- **Log Findings:**
  - Note any failures, delays, or unexpected behaviors during tests.
  
- **Implement Improvements:**
  - Address identified issues and refine configurations for better resilience.

---

## Best Practices and Recommendations

To maintain a robust and reliable DR and failover environment, adhere to the following best practices:

1. **Regular Backups:**
   - Maintain regular backups in addition to replication to safeguard against data loss.
   
2. **Network Redundancy:**
   - Ensure multiple network paths to prevent single points of failure.
   
3. **Security Measures:**
   - Secure your Proxmox cluster with firewalls, SSH keys, and regular updates.
   
4. **Comprehensive Documentation:**
   - Document your setup, configurations, and procedures thoroughly for maintenance and troubleshooting.
   
5. **Monitoring and Alerts:**
   - Implement monitoring tools to receive prompt alerts on failures or issues.
   
6. **Resource Planning:**
   - Ensure your DR site has adequate resources to handle the full load during failover.
   
7. **Automation:**
   - Utilize automation tools to streamline replication, synchronization, and failover processes.
   
8. **Regular Updates:**
   - Keep Proxmox and Ubuntu updated to benefit from the latest security patches and feature enhancements.
   
9. **Frequent Testing:**
   - Regularly test your DR and failover setups to ensure they function as expected when needed.
   
10. **Leverage Proxmox Documentation:**
    - Refer to the [official Proxmox documentation](https://pve.proxmox.com/wiki/Main_Page) for advanced configurations and additional insights.

---

By following this comprehensive tutorial, you will establish a resilient virtualization environment using **Proxmox VE** on **Ubuntu Server**, complete with **Disaster Recovery (DR) sites** and effective **failover mechanisms**. Regular maintenance, monitoring, and testing will ensure that your infrastructure remains robust and capable of handling unexpected failures seamlessly.

For advanced configurations, troubleshooting, or community support, consider visiting the [Proxmox Community Forums](https://forum.proxmox.com/) or consulting professional support services.
