# Comprehensive Guide to Implementing a Graph Database with JanusGraph, HBase, and Elasticsearch on Ubuntu

Implementing a Graph Database with JanusGraph on Ubuntu involves several steps, including setting up the required environment, installing JanusGraph, and configuring it to work with a backend storage and indexing solution. Hereâ€™s a detailed, step-by-step guide:

### Step 1: Update and Upgrade Your System
First, ensure your system is up to date:
```bash
sudo apt update
sudo apt upgrade -y
```

### Step 2: Install Java Development Kit (JDK)
JanusGraph requires Java. Install the latest version of OpenJDK:
```bash
sudo apt install openjdk-11-jdk -y
```

Verify the installation:
```bash
java -version
```

### Step 3: Set JAVA_HOME Environment Variable
Set the `JAVA_HOME` environment variable temporarily:
```bash
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
```

Make the change permanent by adding it to your profile script (`~/.bashrc` for bash users or `~/.zshrc` for zsh users):
```bash
echo "export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> ~/.bashrc
source ~/.bashrc
```

Verify it's set:
```bash
echo $JAVA_HOME
```

### Step 4: Install Apache TinkerPop Gremlin Console
The Gremlin Console is a tool that allows you to interact with your graph database.
```bash
wget https://archive.apache.org/dist/tinkerpop/3.5.3/apache-tinkerpop-gremlin-console-3.5.3-bin.zip
unzip apache-tinkerpop-gremlin-console-3.5.3-bin.zip
```

### Step 5: Download and Install JanusGraph
Download JanusGraph from its official release page:
```bash
wget https://github.com/JanusGraph/janusgraph/releases/download/v0.6.2/janusgraph-0.6.2.zip
unzip janusgraph-0.6.2.zip
```

### Step 6: Set Up Backend Storage and Indexing
JanusGraph can use different storage backends like HBase, Cassandra, and various indexing backends like Elasticsearch or Solr. Here, we'll use HBase and Elasticsearch.

#### Install HBase
Download and extract HBase:
```bash
wget https://archive.apache.org/dist/hbase/2.4.8/hbase-2.4.8-bin.tar.gz
tar -zxvf hbase-2.4.8-bin.tar.gz
```

Configure HBase by editing `hbase-2.4.8/conf/hbase-site.xml`:
```xml
<configuration>
    <property>
        <name>hbase.rootdir</name>
        <value>file:///usr/local/hbase</value>
    </property>
    <property>
        <name>hbase.zookeeper.property.dataDir</name>
        <value>/usr/local/zookeeper</value>
    </property>
</configuration>
```

Start HBase:
```bash
cd hbase-2.4.8
./bin/start-hbase.sh
```

Verify HBase is running:
```bash
./bin/hbase shell
```

#### Install Elasticsearch
Download and install Elasticsearch:
```bash
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.13.4-amd64.deb
sudo dpkg -i elasticsearch-7.13.4-amd64.deb
```

Start Elasticsearch:
```bash
sudo systemctl start elasticsearch
```

### Step 7: Configure JanusGraph
Edit the `conf/janusgraph-hbase-es.properties` file in the JanusGraph directory to configure JanusGraph to use HBase and Elasticsearch:
```properties
# Storage Backend Configuration
storage.backend=hbase
storage.hostname=127.0.0.1

# Index Backend Configuration
index.search.backend=elasticsearch
index.search.hostname=127.0.0.1
```

### Step 8: Start JanusGraph
Start JanusGraph Gremlin Server:
```bash
cd janusgraph-0.6.2
bin/gremlin-server.sh conf/gremlin-server/gremlin-server.yaml
```

### Step 9: Connect to JanusGraph with Gremlin Console
Open another terminal and navigate to the Gremlin Console directory:
```bash
cd apache-tinkerpop-gremlin-console-3.5.3
bin/gremlin.sh
```

Connect to your JanusGraph instance:
```bash
:remote connect tinkerpop.server conf/remote.yaml
:remote console
```

### Step 10: Create and Query a Graph
You can now create and query your graph. For example:
```gremlin
graph = JanusGraphFactory.open('conf/janusgraph-hbase-es.properties')
g = graph.traversal()

// Add vertices and edges
marko = g.addV('person').property('name', 'Marko').next()
vadas = g.addV('person').property('name', 'Vadas').next()
g.addE('knows').from(marko).to(vadas).property('since', 2010).next()

// Query the graph
g.V().has('name', 'Marko').out('knows').values('name')
```

### Step 11: Verify and Test
Run some basic queries to ensure everything is working correctly:
```gremlin
g.V().hasLabel('person').values('name')
```

By following these steps, you should be able to set up and configure a JanusGraph graph database on Ubuntu, including setting the necessary environment variables for Java.
