Create a Simple Microservice
2.1 Create a Project Directory
Create a directory for your microservices project:

 
 
mkdir microservices-demo
cd microservices-demo
2.2 Create a Simple Node.js Microservice
Let's create a simple Node.js service. First, initialize a new Node.js project:

 
 
mkdir service1
cd service1
npm init -y
Install Express:

 
 
npm install express
Create a simple Express application:

javascript
 
// service1/index.js
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello from Service 1');
});

app.listen(port, () => {
  console.log(`Service 1 listening at http://localhost:${port}`);
});
Add a Dockerfile for the service:

dockerfile
 
# service1/Dockerfile
FROM node:14

WORKDIR /usr/src/app

COPY package*.json ./
RUN npm install
COPY . .

EXPOSE 3000
CMD ["node", "index.js"]
Create a .dockerignore file to prevent unnecessary files from being included in the Docker image:

dockerfile
 
# service1/.dockerignore
node_modules
npm-debug.log
2.3 Create a Docker Compose File
Navigate back to the project root directory and create a docker-compose.yml file to define your services:

 
 
# docker-compose.yml
version: '3.8'

services:
  service1:
    build: ./service1
    ports:
      - "3000:3000"
Step 3: Run Your Microservices
Build and run your services using Docker Compose:

 
 
docker-compose up --build
Open your browser and navigate to http://localhost:3000. You should see "Hello from Service 1".

Please let me know when you're ready to proceed to the next steps, which will involve creating additional services, inter-service communication, and more complex microservices setups.
