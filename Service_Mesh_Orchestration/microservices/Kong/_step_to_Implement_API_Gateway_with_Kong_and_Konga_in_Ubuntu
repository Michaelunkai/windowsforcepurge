Sure! Here is a step-by-step guide to implementing API Gateway with Kong and Konga on Ubuntu. This guide assumes that Docker is already installed on your system.

### Step 1: Create a Docker Network

First, create a Docker network that Kong and the database will use to communicate.

  
docker network create kong-net

### Step 2: Start a PostgreSQL Container

Kong requires a PostgreSQL or Cassandra database. We'll use PostgreSQL for this example.

  
docker run -d --name kong-database \
  --network=kong-net \
  -p 5432:5432 \
  -e "POSTGRES_USER=kong" \
  -e "POSTGRES_DB=kong" \
  -e "POSTGRES_PASSWORD=kong" \
  postgres:13

### Step 3: Prepare the Kong Database

Migrate the database for Kong.

  
docker run --rm \
  --network=kong-net \
  -e "KONG_DATABASE=postgres" \
  -e "KONG_PG_HOST=kong-database" \
  -e "KONG_PG_PASSWORD=kong" \
  kong:latest kong migrations bootstrap

### Step 4: Start the Kong Container

Run the Kong container.

  
docker run -d --name kong \
  --network=kong-net \
  -e "KONG_DATABASE=postgres" \
  -e "KONG_PG_HOST=kong-database" \
  -e "KONG_PG_PASSWORD=kong" \
  -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" \
  -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" \
  -e "KONG_PROXY_ERROR_LOG=/dev/stderr" \
  -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" \
  -e "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl" \
  -p 8000:8000 \
  -p 8443:8443 \
  -p 8001:8001 \
  -p 8444:8444 \
  kong:latest

### Step 5: Start the Konga Container

Konga is a GUI for managing Kong. We'll run Konga in a separate container.

First, create a volume for Konga data.

  
docker volume create kongadata

Now run the Konga container.

  
docker run -d --name konga \
  --network=kong-net \
  -p 1337:1337 \
  -e "DB_ADAPTER=postgres" \
  -e "DB_HOST=kong-database" \
  -e "DB_USER=kong" \
  -e "DB_PASSWORD=kong" \
  -e "DB_DATABASE=kong" \
  -v kongadata:/app/konga \
  pantsel/konga

### Step 6: Access Kong and Konga

- **Kong Admin GUI:** You can access the Kong Admin GUI at `http://localhost:8001`.
- **Kong Proxy:** The Kong proxy will be available at `http://localhost:8000`.
- **Konga GUI:** You can access Konga at `http://localhost:1337`.

### Step 7: Configure Konga

1. Open `http://localhost:1337` in your browser.
2. Register a new user account.
3. Once logged in, create a new connection:
   - **Name:** Kong (or any preferred name)
   - **Kong Admin URL:** `http://kong:8001`

Click on "Create Connection" and you should now be able to manage Kong using Konga's web interface.

### Step 8: Adding a Service and Route in Kong

1. **Add a Service:**
      
    curl -i -X POST http://localhost:8001/services \
      --data name=test-service \
      --data url='http://httpbin.org'

2. **Add a Route:**
      
    curl -i -X POST http://localhost:8001/services/test-service/routes \
      --data 'paths[]=/test'

3. **Test the Route:**
      
    curl -i http://localhost:8000/test

You should see the response from `httpbin.org`.

### Conclusion

You have successfully set up Kong as an API Gateway with Konga as its management UI on Ubuntu using Docker. You can now use Konga to manage your Kong services, routes, plugins, and consumers through an easy-to-use graphical interface.
