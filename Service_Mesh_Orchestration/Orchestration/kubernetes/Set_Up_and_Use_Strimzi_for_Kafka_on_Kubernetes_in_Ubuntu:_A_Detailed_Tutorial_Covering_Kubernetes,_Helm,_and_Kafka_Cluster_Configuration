# Comprehensive Step-by-Step Guide to Set Up and Use Strimzi for Kafka on Kubernetes in Ubuntu: A Detailed Tutorial Covering Kubernetes, Helm, and Kafka Cluster Configuration

## Step 1: Prerequisites
Before setting up Strimzi for Kafka on Kubernetes in Ubuntu, ensure you have the following installed on your system:
- **Kubernetes Cluster** (Minikube, Kind, or a production cluster)
- **kubectl** command-line tool
- **Helm** package manager (optional but recommended)

### Install Kubernetes (Minikube)
Begin by installing Minikube to set up a local Kubernetes cluster.

  
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
chmod +x minikube
sudo mv minikube /usr/local/bin/
minikube start --driver=none

### Install kubectl
The `kubectl` command-line tool is necessary for interacting with your Kubernetes cluster.

  
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
sudo mv kubectl /usr/local/bin/

### Install Helm (Optional)
Helm is the package manager for Kubernetes and can be useful for managing applications like Strimzi.

  
curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

## Step 2: Deploy Strimzi on Kubernetes

### Option 1: Install Strimzi using kubectl
Create a new namespace for Kafka and deploy Strimzi using the following commands:

  
kubectl create namespace kafka
kubectl apply -f https://strimzi.io/install/latest?namespace=kafka

### Option 2: Install Strimzi using Helm (if Helm is installed)
If you're using Helm, you can deploy Strimzi with these commands:

  
helm repo add strimzi https://strimzi.io/charts/
helm repo update
helm install strimzi-kafka-operator strimzi/strimzi-kafka-operator --namespace kafka

## Step 3: Create a Kafka Cluster using Strimzi

### Deploy a Kafka Cluster
To create a Kafka cluster, start by creating a YAML configuration file named `kafka-cluster.yaml` with the following content:

  
nano kafka-cluster. 

  
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  namespace: kafka
spec:
  kafka:
    version: 3.0.0
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}

Apply the configuration to deploy the Kafka cluster:

  
kubectl apply -f kafka-cluster.yaml

## Step 4: Verify the Deployment
To confirm that your Kafka cluster is up and running, use the following commands:

  
kubectl get kafka -n kafka
kubectl get pods -n kafka

## Step 5: Deploy Kafka Topics and Users

### Create a Topic
Define a new Kafka topic by creating a YAML file named `kafka-topic.yaml`:

  
nano kafka-topic. 

  
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: my-topic
  labels:
    strimzi.io/cluster: my-cluster
  namespace: kafka
spec:
  partitions: 3
  replicas: 3

Apply the configuration to create the topic:

  
kubectl apply -f kafka-topic.yaml

### Create a User
Define a Kafka user by creating a YAML file named `kafka-user.yaml`:

  
nano kafka-user. 

  
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  name: my-user
  labels:
    strimzi.io/cluster: my-cluster
  namespace: kafka
spec:
  authentication:
    type: scram-sha-512

Apply the configuration to create the user:

  
kubectl apply -f kafka-user.yaml

## Step 6: Access Kafka Outside the Kubernetes Cluster

### Expose Kafka using NodePort (for testing purposes)
To access Kafka from outside the Kubernetes cluster, expose it using NodePort. Create a YAML file named `kafka-external.yaml`:

  
nano kafka-external. 

  
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  namespace: kafka
spec:
  kafka:
    version: 3.0.0
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: external
        port: 9094
        type: nodeport
        tls: false
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}

Apply the configuration to expose Kafka:

  
kubectl apply -f kafka-external.yaml

## Step 7: Test the Kafka Setup

### Install Kafka CLI Tools
Download and extract Kafka CLI tools to interact with your Kafka cluster:

  
wget https://downloads.apache.org/kafka/3.0.0/kafka_2.13-3.0.0.tgz
tar -xzf kafka_2.13-3.0.0.tgz
cd kafka_2.13-3.0.0

### Produce and Consume Messages
Test Kafka by producing and consuming messages.

#### Produce messages:
  
bin/kafka-console-producer.sh --broker-list <EXTERNAL_IP>:9094 --topic my-topic

#### Consume messages:
  
bin/kafka-console-consumer.sh --bootstrap-server <EXTERNAL_IP>:9094 --topic my-topic --from-beginning

## Step 8: Clean Up Resources
To clean up the resources created during this tutorial, use the following commands:

  
kubectl delete -f kafka-topic.yaml
kubectl delete -f kafka-user.yaml
kubectl delete -f kafka-cluster.yaml
kubectl delete -f kafka-external.yaml
kubectl delete namespace kafka

This concludes the comprehensive step-by-step guide to setting up and using Strimzi for Kafka on Kubernetes in Ubuntu.
