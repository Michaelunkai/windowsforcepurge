Hereâ€™s the step-by-step guide for setting up, running, and using **Hasura** (BaaS tool) in Ubuntu with Docker:

### Step 1: Install Docker
If Docker is not installed on your Ubuntu system, you need to install it first:

  
sudo apt-get install -y docker.io
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER

### Step 2: Install Docker-Compose (Optional)
Some setups use Docker-Compose to manage multiple containers (Hasura, Postgres). To install Docker-Compose:

  
sudo apt-get install -y docker-compose

### Step 3: Create a Docker Compose File for Hasura
Create a `docker-compose.yml` file to configure Hasura and Postgres services.

  
nano docker-compose.yml

Add the following content to the file:

  
version: '3.6'
services:
  postgres:
    image: postgres:13
    restart: always
    volumes:
      - pgdata:/var/lib/postgre /data
    environment:
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_USER: postgres
      POSTGRES_DB: mydb

  hasura:
    image: hasura/graphql-engine:v2.28.0
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:mysecretpassword@postgres:5432/mydb
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey

volumes:
  pgdata:

### Step 4: Run Docker Compose
After creating the `docker-compose.yml` file, you can start the services by running:

  
docker-compose up -d

This will pull the required Docker images, start a Postgres container, and run the Hasura GraphQL Engine on port 8080.

### Step 5: Access Hasura Console
To access the Hasura GraphQL engine console, open your browser and go to:

http://localhost:8080

You will be prompted to enter the admin secret key. Use the one you set in the `docker-compose.yml` file (`myadminsecretkey`).

### Step 6: Explore Hasura Console
Once inside the Hasura console:
1. **Data**: Manage your Postgres tables, relationships, and permissions.
2. **API**: Explore the GraphQL API auto-generated by Hasura.
3. **Remote Schemas**: Integrate additional GraphQL APIs.
4. **Events**: Set up event triggers for server-side business logic.

### Step 7: Stopping the Containers
If you want to stop the running containers, use the following command:

  
docker-compose down

### Step 8: Optional - Access Postgres Database
You can access the Postgres database running inside Docker using the following command:

  
docker exec -it <container_name> psql -U postgres -d mydb

Replace `<container_name>` with the actual name of the Postgres container, which you can find using:

  
docker ps

This setup provides a ready-to-use Hasura service connected to a Postgres database, all running within Docker on your Ubuntu system.
