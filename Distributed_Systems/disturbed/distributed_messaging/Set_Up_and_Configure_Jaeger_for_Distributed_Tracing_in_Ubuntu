 Create a Docker Compose File
Create a docker-compose.yml file for Jaeger. This file defines the services that Jaeger will use.

 
 
version: '3'
services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
Step 5: Run Jaeger
Use Docker Compose to start Jaeger.

 
 
sudo docker-compose up -d
Step 6: Verify Jaeger is Running
Open your browser and navigate to http://localhost:16686. You should see the Jaeger UI.

Step 7: Instrument Your Application
To use Jaeger, you need to instrument your application code to send tracing data to Jaeger. This involves integrating Jaeger client libraries in your application. The exact method depends on the programming language you are using. For example, in Python:

Install the Jaeger client library.

 
 
pip install jaeger-client
Configure Jaeger in your application.

 
 
from jaeger_client import Config
from flask import Flask

def init_tracer(service_name='your-service'):
    config = Config(
        config={
            'sampler': {'type': 'const', 'param': 1},
            'local_agent': {'reporting_host': 'localhost'},
            'logging': True,
        },
        service_name=service_name,
        validate=True,
    )
    return config.initialize_tracer()

app = Flask(__name__)
tracer = init_tracer()

@app.route('/')
def index():
    with tracer.start_span('index') as span:
        span.set_tag('http.status_code', 200)
        return "Hello, Jaeger!"

if __name__ == '__main__':
    app.run()
Step 8: View Traces
Once your application is instrumented and running, you can view the traces in the Jaeger UI at http://localhost:16686.
