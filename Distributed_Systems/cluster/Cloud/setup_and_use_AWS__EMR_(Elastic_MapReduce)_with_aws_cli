Sure, let's go through the entire process step-by-step to set up and use AWS EMR (Elastic MapReduce) with AWS CLI, ensuring all steps are correctly followed and any errors are addressed.

### Step 1: Install AWS CLI
Ensure you have the AWS CLI installed. You can download and install the AWS CLI from [here](https://aws.amazon.com/cli/).

To check if AWS CLI is installed, run:
  
aws --version

### Step 2: Configure AWS CLI
Configure your AWS CLI with your credentials:
  
aws configure
You'll be prompted to enter your AWS Access Key ID, Secret Access Key, region, and output format. For example:
AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID
AWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY
Default region name [None]: us-west-2
Default output format [None]: json

### Step 3: Create the IAM Roles and Instance Profiles

#### Create the trust policy file `trust-policy.json`
Create a file named `trust-policy.json` with the following content:
 json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}

#### Create EMR_EC2_DefaultRole
  
aws iam create-role --role-name EMR_EC2_DefaultRole --assume-role-policy-document file://trust-policy.json

#### Attach Policy to EMR_EC2_DefaultRole
  
aws iam attach-role-policy --role-name EMR_EC2_DefaultRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role

#### Create EMR_DefaultRole
  
aws iam create-role --role-name EMR_DefaultRole --assume-role-policy-document file://trust-policy.json

#### Attach Policy to EMR_DefaultRole
  
aws iam attach-role-policy --role-name EMR_DefaultRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole

#### Create Instance Profile for EMR_EC2_DefaultRole
  
aws iam create-instance-profile --instance-profile-name EMR_EC2_DefaultRole

#### Add Role to Instance Profile
  
aws iam add-role-to-instance-profile --instance-profile-name EMR_EC2_DefaultRole --role-name EMR_EC2_DefaultRole

### Step 4: Create an EMR Cluster
Use the following command to create an EMR cluster:
  
aws emr create-cluster --name "MyCluster" --release-label emr-5.33.0 \
--applications Name=Hadoop Name=Spark \
--ec2-attributes KeyName=MyEC2KeyPair \
--instance-type m5.xlarge --instance-count 3 \
--use-default-roles

This  ould output:
 json
{
    "ClusterId": "j-3B1LRW4ACA8BU",
    "ClusterArn": "arn:aws:elasticmapreduce:us-east-1:284233987918:cluster/j-3B1LRW4ACA8BU"
}

### Step 5: Monitor the Cluster
You can check the status of your cluster using:
  
aws emr describe-cluster --cluster-id j-3B1LRW4ACA8BU

### Step 6: SSH into Master Node
To SSH into the master node:
1. Get the public DNS of the master node:
     
   aws emr list-instances --cluster-id j-3B1LRW4ACA8BU --instance-group-types MASTER --query 'Instances[0].PublicDnsName' --output text
2. SSH into the master node using the DNS name:
     
   ssh -i /path/to/your/keypair.pem hadoop@<MasterPublicDNS>

### Step 7: Submit Jobs
To submit a Spark job, you can use the following command:

Make sure the cluster is in the `WAITING` state before adding steps:
  
aws emr add-steps --cluster-id j-3B1LRW4ACA8BU --steps Type=Spark,Name="Spark Program",ActionOnFailure=CONTINUE,Args=[--deploy-mode,cluster,--class,org.apache.spark.examples.SparkPi,/usr/lib/spark/examples/jars/spark-examples.jar,10]

### Step 8: Terminate the Cluster
When you are done, you can terminate the cluster to avoid additional charges:
  
aws emr terminate-clusters --cluster-ids j-3B1LRW4ACA8BU

### Step 9: Automate Cluster Creation and Job Submission
You can write a shell script to automate cluster creation, job submission, and termination. For example:
  
#!/bin/ 

# Create EMR cluster
CLUSTER_ID=$(aws emr create-cluster --name "MyCluster" --release-label emr-5.33.0 \
--applications Name=Hadoop Name=Spark \
--ec2-attributes KeyName=MyEC2KeyPair \
--instance-type m5.xlarge --instance-count 3 \
--use-default-roles --query 'ClusterId' --output text)

# Wait for the cluster to be ready
aws emr wait cluster-running --cluster-id $CLUSTER_ID

# Submit a Spark job
STEP_ID=$(aws emr add-steps --cluster-id $CLUSTER_ID --steps Type=Spark,Name="Spark Program",ActionOnFailure=CONTINUE,Args=[--deploy-mode,cluster,--class,org.apache.spark.examples.SparkPi,/usr/lib/spark/examples/jars/spark-examples.jar,10] --query 'StepIds[0]' --output text)

# Wait for the job to complete
aws emr wait step-complete --cluster-id $CLUSTER_ID --step-id $STEP_ID

# Terminate the cluster
aws emr terminate-clusters --cluster-ids $CLUSTER_ID

By following these steps, you should be able to set up and use AWS EMR with the AWS CLI effectively.
