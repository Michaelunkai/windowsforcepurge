 $apiKey = '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'; $headers = @{'Authorization' = "Bearer $apiKey"; 'HTTP-Referer' = 'https://openrouter.ai/'; 'X-Title' = 'PowerShell AI Chat'; 'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}; function Invoke-WithRetry { param([string]$Uri, [hashtable]$Headers, [hashtable]$Body = $null, [string]$Method = 'GET', [int]$MaxRetries = 5, [int]$BaseDelay = 2); for ($i = 1; $i -le $MaxRetries; $i++) { try { if ($Method -eq 'POST' -and $Body) { $jsonBody = $Body | ConvertTo-Json -Depth 10; $response = Invoke-RestMethod -Uri $Uri -Headers $Headers -Method $Method -Body $jsonBody -TimeoutSec 30 } else { $response = Invoke-RestMethod -Uri $Uri -Headers $Headers -Method $Method -TimeoutSec 30 }; return $response } catch { if ($_.Exception.Response.StatusCode -eq 429 -or $_.Exception.Message -match '429|rate limit') { $delay = [Math]::Min(60, $BaseDelay * [Math]::Pow(2, $i-1)); Write-Host "Rate limited, waiting $delay seconds (attempt $i/$MaxRetries)..." -ForegroundColor Yellow; Start-Sleep $delay } else { Write-Host "API Error: $($_.Exception.Message)" -ForegroundColor Red; if ($i -eq $MaxRetries) { throw } else { Start-Sleep 2 } } } }; throw 'Max retries exceeded' }; try { Write-Host 'Fetching OpenRouter models with bulletproof rate limiting...' -ForegroundColor Green; $models = Invoke-WithRetry -Uri 'https://openrouter.ai/api/v1/models' -Headers $headers; $allModels = if ($models.data) { $models.data } else { $models }; $freeModels = $allModels | Where-Object { $_.pricing.prompt -eq '0' -and $_.pricing.completion -eq '0' } | Sort-Object { switch -Regex ($_.id) { 'gpt-4|claude-3.5|gemini-1.5-pro' { 1 } 'llama-3.1-405b|qwen2.5-72b' { 2 } 'llama-3.1-70b|mixtral-8x22b|qwen2.5-32b' { 3 } 'llama-3.1-8b|mixtral-8x7b|gemma-2-27b' { 4 } 'llama-3.2|phi-3|gemma-2-9b' { 5 } 'llama-3-8b|mistral-7b|qwen2.5-7b' { 6 } 'gemma-7b|openchat' { 7 } 'llama-2|falcon' { 8 } default { 9 } } }; Write-Host "`nFound $($freeModels.Count) free models (sorted smartest to dumbest):" -ForegroundColor Cyan; for ($i = 0; $i -lt $freeModels.Count; $i++) { Write-Host "$($i+1). $($freeModels[$i].id)" -ForegroundColor White }; do { try { $selection = Read-Host "`nSelect model (1-$($freeModels.Count)) or 'q' to quit"; if ($selection -eq 'q') { break }; $modelIndex = [int]$selection - 1; if ($modelIndex -lt 0 -or $modelIndex -ge $freeModels.Count) { Write-Host 'Invalid selection!' -ForegroundColor Red; continue }; $selectedModel = $freeModels[$modelIndex]; Write-Host "`nSelected: $($selectedModel.id)" -ForegroundColor Green; Write-Host 'Starting bulletproof chat (type "exit" to quit, "models" to reselect)...' -ForegroundColor Yellow; do { $userInput = Read-Host "`n[You]"; if ($userInput -eq 'exit') { break }; if ($userInput -eq 'models') { break }; if ([string]::IsNullOrWhiteSpace($userInput)) { continue }; try { $chatHeaders = $headers.Clone(); $chatHeaders['Content-Type'] = 'application/json'; $chatBody = @{ model = $selectedModel.id; messages = @(@{ role = 'user'; content = $userInput }); max_tokens = 1000; temperature = 0.7 }; Write-Host "[Processing with $($selectedModel.id)...]" -ForegroundColor Gray; $response = Invoke-WithRetry -Uri 'https://openrouter.ai/api/v1/chat/completions' -Headers $chatHeaders -Body $chatBody -Method 'POST' -MaxRetries 3; Write-Host "[$($selectedModel.id)]: $($response.choices[0].message.content)" -ForegroundColor Cyan; Start-Sleep 1 } catch { Write-Host "Model $($selectedModel.id) error: $($_.Exception.Message)" -ForegroundColor Red; Write-Host 'Retrying with backoff in 3 seconds...' -ForegroundColor Yellow; Start-Sleep 3 } } while ($userInput -ne 'exit' -and $userInput -ne 'models') } catch { Write-Host "Selection error: $($_.Exception.Message)" -ForegroundColor Red } } while ($selection -ne 'q') } catch { Write-Host "Fatal error: $($_.Exception.Message)" -ForegroundColor Red; Read-Host 'Press Enter to exit' }
