import os
import re
import sys
import time
import random
import json
from pathlib import Path
from typing import List, Dict, Any
from concurrent.futures import ThreadPoolExecutor, as_completed

# Install required packages if needed
try:
    import requests
    from tqdm import tqdm
    from bs4 import BeautifulSoup
    from mutagen.mp3 import MP3
    from mutagen.id3 import ID3, TIT2, TPE1, TALB
except ImportError:
    print("Installing required packages...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "requests", "tqdm", "beautifulsoup4", "mutagen"])
    import requests
    from tqdm import tqdm
    from bs4 import BeautifulSoup
    from mutagen.mp3 import MP3
    from mutagen.id3 import ID3, TIT2, TPE1, TALB

class YouTubeMP3Downloader:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Referer': 'https://www.youtube.com/',
            'Origin': 'https://www.youtube.com'
        })
        
        # Alternative MP3 conversion API endpoints (rotate between them for reliability)
        self.mp3_apis = [
            "https://yt-mp3-converter.p.rapidapi.com/mp3/",
            "https://youtube-mp36.p.rapidapi.com/dl",
            "https://youtube-mp3-download1.p.rapidapi.com/dl",
        ]
        self.api_keys = {
            # Placeholder for API keys - users will need to add their own
            "yt-mp3-converter.p.rapidapi.com": "",
            "youtube-mp36.p.rapidapi.com": "",
            "youtube-mp3-download1.p.rapidapi.com": "",
        }
        
        # Alternative method using yt-dlp
        self.use_ytdlp = True
        
    def ensure_ytdlp_installed(self):
        """Make sure yt-dlp is installed."""
        try:
            import yt_dlp
            return True
        except ImportError:
            try:
                print("Installing yt-dlp...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", "yt-dlp"])
                import yt_dlp
                return True
            except Exception as e:
                print(f"Failed to install yt-dlp: {e}")
                self.use_ytdlp = False
                return False

    def is_valid_youtube_url(self, url: str) -> bool:
        """Check if the URL is a valid YouTube URL."""
        youtube_regex = r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
        youtube_channel_regex = r'(https?://)?(www\.)?youtube\.com/(@|c/|channel/|user/)?([a-zA-Z0-9\-_]+)'
        
        return bool(re.match(youtube_regex, url)) or bool(re.match(youtube_channel_regex, url))

    def extract_channel_id(self, url: str) -> str:
        """Extract channel ID or username from the URL."""
        # Handle @username format
        if '@' in url:
            match = re.search(r'@([a-zA-Z0-9\-_]+)', url)
            if match:
                return '@' + match.group(1)
        
        # Handle channel/ID format
        match = re.search(r'channel/([a-zA-Z0-9\-_]+)', url)
        if match:
            return match.group(1)
        
        # Handle c/name format
        match = re.search(r'c/([a-zA-Z0-9\-_]+)', url)
        if match:
            return 'c/' + match.group(1)
        
        # Handle user/name format
        match = re.search(r'user/([a-zA-Z0-9\-_]+)', url)
        if match:
            return 'user/' + match.group(1)
        
        # Last resort, try to extract the last part of the URL
        parts = url.strip('/').split('/')
        if parts:
            return parts[-1]
        
        return url

    def get_channel_videos(self, channel_identifier: str) -> List[Dict[str, Any]]:
        """Get videos from a channel using BeautifulSoup and direct HTML parsing."""
        videos = []
        
        # Format the channel URL
        if channel_identifier.startswith('@'):
            channel_url = f"https://www.youtube.com/{channel_identifier}/videos"
        elif channel_identifier.startswith(('c/', 'user/', 'channel/')):
            channel_url = f"https://www.youtube.com/{channel_identifier}/videos"
        else:
            # Try to guess the format
            if re.match(r'^UC[\w-]{22}$', channel_identifier):
                channel_url = f"https://www.youtube.com/channel/{channel_identifier}/videos"
            else:
                channel_url = f"https://www.youtube.com/@{channel_identifier}/videos"
        
        print(f"Fetching videos from: {channel_url}")
        
        # Try up to 3 times
        for attempt in range(3):
            try:
                response = self.session.get(channel_url, timeout=15)
                response.raise_for_status()
                
                # Use BeautifulSoup to parse the page
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # Try to extract initial data
                scripts = soup.find_all('script')
                initial_data = None
                
                for script in scripts:
                    if script.string and 'var ytInitialData = ' in script.string:
                        json_str = script.string.split('var ytInitialData = ')[1].split(';</script>')[0]
                        try:
                            initial_data = json.loads(json_str)
                            break
                        except json.JSONDecodeError:
                            continue
                
                if not initial_data:
                    # Try another method
                    for script in scripts:
                        if script.string and 'window["ytInitialData"] = ' in script.string:
                            json_str = script.string.split('window["ytInitialData"] = ')[1].split(';</script>')[0]
                            try:
                                initial_data = json.loads(json_str)
                                break
                            except json.JSONDecodeError:
                                continue
                
                # Extract video details
                if initial_data:
                    # Try first method (modern layout)
                    try:
                        video_items = []
                        tabs = initial_data.get('contents', {}).get('twoColumnBrowseResultsRenderer', {}).get('tabs', [])
                        
                        for tab in tabs:
                            if 'tabRenderer' in tab and tab['tabRenderer'].get('title') == 'Videos':
                                # Try richGridRenderer path
                                contents = tab['tabRenderer'].get('content', {}).get('richGridRenderer', {}).get('contents', [])
                                
                                for item in contents:
                                    if 'richItemRenderer' in item:
                                        content = item['richItemRenderer'].get('content', {})
                                        if 'videoRenderer' in content:
                                            video_items.append(content['videoRenderer'])
                                
                                # If richGridRenderer not found, try sectionListRenderer
                                if not video_items:
                                    section_contents = tab['tabRenderer'].get('content', {}).get('sectionListRenderer', {}).get('contents', [])
                                    for section in section_contents:
                                        if 'itemSectionRenderer' in section:
                                            for content_item in section['itemSectionRenderer'].get('contents', []):
                                                if 'gridRenderer' in content_item:
                                                    for grid_item in content_item['gridRenderer'].get('items', []):
                                                        if 'gridVideoRenderer' in grid_item:
                                                            video_items.append(grid_item['gridVideoRenderer'])
                        
                        # Extract video details
                        for item in video_items:
                            try:
                                video_id = item.get('videoId')
                                if not video_id:
                                    continue
                                    
                                title = item.get('title', {}).get('runs', [{}])[0].get('text', 'Unknown Title')
                                
                                # Get view count
                                view_count_text = ''
                                if 'viewCountText' in item:
                                    view_count_text = item['viewCountText'].get('simpleText', '')
                                    if not view_count_text and 'runs' in item['viewCountText']:
                                        view_count_text = item['viewCountText']['runs'][0].get('text', '')
                                
                                # Extract numeric views
                                views = 0
                                if view_count_text:
                                    views_match = re.search(r'(\d[\d,]*)', view_count_text)
                                    if views_match:
                                        views = int(views_match.group(1).replace(',', ''))
                                
                                # Get thumbnail
                                thumbnail_url = ''
                                if 'thumbnail' in item and 'thumbnails' in item['thumbnail']:
                                    thumbnails = item['thumbnail']['thumbnails']
                                    if thumbnails:
                                        thumbnail_url = thumbnails[-1].get('url', '')
                                
                                video_url = f"https://www.youtube.com/watch?v={video_id}"
                                
                                # Add to video list
                                videos.append({
                                    'video_id': video_id,
                                    'title': title,
                                    'views': views,
                                    'url': video_url,
                                    'thumbnail': thumbnail_url
                                })
                            except Exception as e:
                                print(f"Error parsing video item: {e}")
                                continue
                    except Exception as e:
                        print(f"Error extracting videos from JSON: {e}")
                
                # If we still don't have videos, try regex as fallback
                if not videos:
                    print("Falling back to regex extraction...")
                    video_ids = re.findall(r'"videoId":"([^"]+)"', response.text)
                    video_ids = list(dict.fromkeys(video_ids))  # Remove duplicates
                    
                    for video_id in video_ids[:150]:  # Get more than needed to account for duplicates
                        video_url = f"https://www.youtube.com/watch?v={video_id}"
                        videos.append({
                            'video_id': video_id,
                            'title': f"Video {video_id}",  # Placeholder title
                            'views': 0,  # Unknown views
                            'url': video_url,
                            'thumbnail': f"https://i.ytimg.com/vi/{video_id}/hqdefault.jpg"
                        })
                
                break  # Success, exit retry loop
                
            except Exception as e:
                print(f"Error fetching channel page (attempt {attempt+1}/3): {e}")
                if attempt < 2:
                    time.sleep(3)  # Wait before retrying
        
        # If we have videos with missing metadata, fetch it
        videos_to_update = [v for v in videos if v['title'] == f"Video {v['video_id']}" or v['views'] == 0]
        if videos_to_update:
            print(f"Fetching metadata for {len(videos_to_update)} videos...")
            self._fetch_video_metadata(videos_to_update)
        
        # Sort by views (highest first)
        videos.sort(key=lambda x: x['views'], reverse=True)
        
        # Limit to top 100
        top_videos = videos[:100]
        print(f"Found {len(videos)} videos, taking top {len(top_videos)} by view count.")
        
        return top_videos

    def _fetch_video_metadata(self, videos: List[Dict[str, Any]]):
        """Fetch metadata for videos with missing info."""
        with ThreadPoolExecutor(max_workers=5) as executor:
            futures = {}
            for video in videos:
                future = executor.submit(self._get_video_info, video['video_id'])
                futures[future] = video
            
            for future in tqdm(as_completed(futures), total=len(futures), desc="Fetching metadata"):
                video = futures[future]
                try:
                    result = future.result()
                    if result:
                        video['title'] = result.get('title', video['title'])
                        video['views'] = result.get('views', video['views'])
                except Exception as e:
                    print(f"Error fetching metadata for {video['video_id']}: {e}")

    def _get_video_info(self, video_id: str) -> Dict[str, Any]:
        """Get info for a single video."""
        video_url = f"https://www.youtube.com/watch?v={video_id}"
        try:
            response = self.session.get(video_url, timeout=10)
            if response.status_code != 200:
                return {}
                
            # Try to extract title and view count
            title_match = re.search(r'<meta name="title" content="([^"]+)"', response.text)
            views_match = re.search(r'<meta itemprop="interactionCount" content="(\d+)"', response.text)
            
            title = title_match.group(1) if title_match else f"Video {video_id}"
            views = int(views_match.group(1)) if views_match else 0
            
            return {
                'title': title,
                'views': views
            }
        except Exception:
            return {}

    def download_mp3_with_ytdlp(self, video_info: Dict[str, Any], output_dir: Path) -> bool:
        """Download MP3 using yt-dlp."""
        try:
            import yt_dlp
            
            video_url = video_info['url']
            
            # Create a valid filename
            safe_title = re.sub(r'[^\w\-_\. ]', '_', video_info['title'])
            filename = f"{safe_title}.mp3"
            output_path = output_dir / filename
            
            # Skip if already downloaded
            if output_path.exists():
                print(f"File already exists: {filename}")
                return True
            
            print(f"Downloading: {video_info['title']}")
            
            # Set up options for yt-dlp
            ydl_opts = {
                'format': 'bestaudio/best',
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
                'outtmpl': str(output_dir / f"{safe_title}.%(ext)s"),
                'quiet': True,
                'no_warnings': True,
                'noprogress': True
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([video_url])
            
            # Check if file was created
            if output_path.exists():
                print(f"Downloaded: {filename}")
                
                # Add ID3 tags
                try:
                    mp3 = MP3(str(output_path), ID3=ID3)
                    try:
                        mp3.add_tags()
                    except:
                        pass  # Tags already exist
                    
                    mp3.tags.add(TIT2(encoding=3, text=video_info['title']))
                    mp3.tags.add(TPE1(encoding=3, text="YouTube"))
                    mp3.tags.add(TALB(encoding=3, text="YouTube Downloads"))
                    mp3.save()
                except Exception as e:
                    print(f"Warning: Could not add ID3 tags: {e}")
                
                return True
            else:
                print(f"Error: MP3 file not created for {video_info['title']}")
                return False
                
        except Exception as e:
            print(f"Error downloading {video_info['title']}: {e}")
            return False

    def download_videos(self, videos: List[Dict[str, Any]], output_dir: Path) -> int:
        """Download videos as MP3 files."""
        successful = 0
        
        # Make sure yt-dlp is installed if we're using it
        if self.use_ytdlp:
            self.ensure_ytdlp_installed()
        
        for i, video in enumerate(videos, 1):
            print(f"\n[{i}/{len(videos)}] Processing video:")
            
            # Use yt-dlp if available
            if self.use_ytdlp:
                success = self.download_mp3_with_ytdlp(video, output_dir)
                if success:
                    successful += 1
            else:
                # Fallback to API methods - would need implementation and API keys
                print("Error: yt-dlp not available and API keys not configured.")
                break
            
            # Add a small delay between downloads
            if i < len(videos):
                time.sleep(random.uniform(1, 3))
        
        return successful

def main():
    """Main function to run the program."""
    # Get the downloads folder path
    downloads_folder = Path.home() / "Downloads" / "YouTube_MP3s"
    downloads_folder.mkdir(exist_ok=True)
    
    print("=" * 60)
    print("YouTube Channel MP3 Downloader")
    print("=" * 60)
    print("This app will download the top 100 most popular videos from a YouTube")
    print("channel as MP3 files and save them to your Downloads folder.")
    print("=" * 60)
    
    downloader = YouTubeMP3Downloader()
    
    # Get the YouTube channel URL from the user
    while True:
        channel_input = input("Enter the YouTube channel URL or @username: ").strip()
        
        if not channel_input:
            print("Input cannot be empty. Please try again.")
            continue
        
        # Add URL prefix if only username is provided
        if not channel_input.startswith(('http://', 'https://', 'www.', '@', 'c/', 'user/', 'channel/')):
            channel_input = '@' + channel_input
        
        if not channel_input.startswith(('http://', 'https://', 'www.')):
            channel_input = f"https://www.youtube.com/{channel_input}"
        
        if not downloader.is_valid_youtube_url(channel_input):
            print("Invalid YouTube URL. Please enter a valid YouTube channel URL or username.")
            continue
        
        break
    
    # Extract channel identifier and get videos
    channel_id = downloader.extract_channel_id(channel_input)
    videos = downloader.get_channel_videos(channel_id)
    
    if not videos:
        print("No videos found or error occurred. Exiting.")
        return
    
    # Create a folder for the channel
    if channel_id.startswith('@'):
        channel_name = channel_id[1:]  # Remove @ for folder name
    else:
        channel_name = channel_id
    
    channel_name = re.sub(r'[^\w\-_\. ]', '_', channel_name)
    channel_folder = downloads_folder / channel_name
    channel_folder.mkdir(exist_ok=True)
    
    # Print information about the videos to be downloaded
    print(f"\nTop {len(videos)} videos from channel:")
    for i, video in enumerate(videos[:10], 1):
        view_str = f"{video['views']:,}" if video['views'] > 0 else "Unknown"
        print(f"{i}. {video['title']} - {view_str} views")
    
    if len(videos) > 10:
        print(f"... and {len(videos) - 10} more videos")
    
    # Confirm with the user
    confirm = input(f"\nDownload {len(videos)} videos as MP3 to {channel_folder}? (y/n): ").strip().lower()
    if confirm != 'y':
        print("Download cancelled. Exiting.")
        return
    
    # Download the videos
    print("\nStarting download...")
    successful_downloads = downloader.download_videos(videos, channel_folder)
    
    # Print summary
    print("\n" + "=" * 60)
    print(f"Download complete! {successful_downloads}/{len(videos)} videos downloaded as MP3.")
    print(f"Files saved to: {channel_folder}")
    print("=" * 60)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nProcess interrupted by user. Exiting.")
    finally:
        input("\nPress Enter to exit...")